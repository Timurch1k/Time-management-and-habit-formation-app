package android.smartstudy;

import android.annotation.SuppressLint;
import android.content.Intent;
import android.provider.ContactsContract;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.*;

public class MainPage extends AppCompatActivity {
    String login;
    Button calendarButton, timetableButton;
    private List<String> currentUserData;
    private User currentUserUser;
    private DataBaseHelper myDB;

    @SuppressLint("SetTextI18n")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main_page);

        calendarButton = findViewById(R.id.calendarButton);
        timetableButton = findViewById(R.id.timetableButton);
        Button logOutButton = findViewById(R.id.logOutButton);
        TextView nextLesson = findViewById(R.id.nextLesson);
        TextView nextLesson2 = findViewById(R.id.nextLesson2);
        TextView nextLesson3 = findViewById(R.id.nextLesson3);
        TextView nextLesson4 = findViewById(R.id.nextLesson4);
        TextView currentUser = findViewById(R.id.currentUserMainPage);

        myDB = new DataBaseHelper(MainPage.this);
        currentUserUser = new User();
        currentUserData = new ArrayList<>();

        Bundle bundle = getIntent().getExtras();
        login = bundle.getString("Login");
        currentUserData.addAll(myDB.current_user_data(login));
        currentUserUser.current_user(currentUserUser, currentUserData);
        Map<String, String> nextLessonMap = nextLesson();

        nextLesson4.setText(nextLessonMap.get("lesson4"));
        nextLesson3.setText(nextLessonMap.get("lesson3"));
        nextLesson2.setText(nextLessonMap.get("lesson2"));
        nextLesson.setText(nextLessonMap.get("lesson"));
        currentUser.setText("Вошёл как: "+ currentUserUser.getName()+" "+currentUserUser.getSurname());
        calendarButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                openCalendar();
            }
        });

        timetableButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                openTimetable();
            }
        });

        logOutButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                openStart();
            }
        });
    }

    public void openTimetable () {
        Intent intent = new Intent(this, Timetable.class);
        Bundle bundle = new Bundle();
        bundle.putString("Login", login);
        intent.putExtras(bundle);
        startActivity(intent);
    }

    public void openCalendar() {
        Intent intent = new Intent(this, CalendarMain.class);
        Bundle bundle = new Bundle();
        bundle.putString("Login", login);
        intent.putExtras(bundle);
        startActivity(intent);
    }

    public void openStart() {
        Intent intent = new Intent(this, Start.class);
        startActivity(intent);
    }
    public Map<String, String> nextLesson() {
        TreeMap<Long,String> tasks = getAllTasks();
        tasks.putAll(getAllNotes());
        Map<String,String> returnMap = new HashMap<>();
        int i = 0;
        for (Long intKey: tasks.keySet()) {
            if (i == 0)
                returnMap.put("lesson4",tasks.get(intKey));
            else if (i == 1)
                returnMap.put("lesson3",tasks.get(intKey));
            else if (i == 2)
                returnMap.put("lesson2",tasks.get(intKey));
            else if (i == 3)
                returnMap.put("lesson",tasks.get(intKey));
            else
                break;
            i++;
        }
        return returnMap;
    }

    public  TreeMap<Long,String> getAllNotes() {
        LocalDate currentDay = LocalDate.now();
        LocalTime now = LocalTime.now();
        List<Task> tasks = myDB.getAllNotes(currentUserUser);
        TreeMap<Long,String> taskDays = new TreeMap<>(Long::compareTo);
        for (Task task : tasks) {
            if(currentDay.isAfter(task.getDate())){
                continue;
            }
            long daysBetween = Duration.between(currentDay.atStartOfDay(),task.getDate().atStartOfDay()).toDays();
            long currentTimeDifference = ((task.getStartTime().getHour() - now.getHour()) * 60L) + (task.getStartTime().getMinute() - now.getMinute()) + (daysBetween * 24 * 60);
            if (currentTimeDifference < 0)
                continue;
            String nextTask = "Разовая задача: "+task.getText() + " (" +CalendarOperations.rusDays(task.getDate().getDayOfWeek().getValue())+ "  "+CalendarOperations.dateFormatterSimple(task.getDate()) + " " + task.getStartTime() + ") " + task.getGoal();
            taskDays.put(currentTimeDifference,nextTask);
        }
        return taskDays;
    }

    public TreeMap<Long, String> getAllTasks() {
        LocalTime now = LocalTime.now();
        int currentDay = LocalDate.now().getDayOfWeek().getValue();
        List<Lesson> lessons = myDB.getAllLessons(currentUserUser);
        TreeMap<Long,String> lessonDays = new TreeMap<>(Long::compareTo);
        String lessonDay = "";
        for (Lesson lesson : lessons) {
            int lessonDayInt = lesson.getDayOfWeekInt();
            if (lessonDayInt > currentDay) {
                lessonDayInt = lessonDayInt - currentDay;
                lessonDay = CalendarOperations.rusDays(lesson.getDayOfWeekInt());
            } else if (currentDay == lessonDayInt){
                lessonDayInt = 0;
                lessonDay = "Сегодня";
            } else {
                lessonDayInt = 7 - Math.abs(lessonDayInt - currentDay);
                lessonDay = CalendarOperations.rusDays(lesson.getDayOfWeekInt());
            }

            long currentTimeDifference = ((lesson.getStartTime().getHour() - now.getHour()) * 60L) + (lesson.getStartTime().getMinute() - now.getMinute()) + (lessonDayInt * 24 * 60L);
            if (currentTimeDifference < 0)
                continue;
            String nextLesson = "Еженедельная задача: "+lesson.getText() + " (" + lessonDay + " " + lesson.getStartTime() + ") " + lesson.getRoom();
            lessonDays.put(currentTimeDifference,nextLesson);
        }
        return lessonDays;
    }
}
